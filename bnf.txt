<program>                   := <func>*
<func>                      := <ident> "(" (<declaration> ("," <declaration>)*)? ")" <blockstmt>

<declaration>               := <declaration-specifiers> <init-declarator>*
<declaration-specifiers>    := <type-specifiers>
<type-specifiers>           := "int"

<init-declarator>           := <declarator>
<declarator>                := "*"* <direct-declarator>
<direct-declarator>         := <ident>
                                | <direct-declarator> "[" <assign> "]"


<stmt>                      := <expr> ";"
                                | <blockstmt>
                                | "return" <expr> ";"
                                | "if" "(" <expr> ")" <stmt> ("else" stmt)?
                                | "for" "(" <expr>? ";" <expr>? ";" <expr>? ")" <stmt>
                                | <declaration> ";"
<blockstmt>                 := "{" <stmt>* "}"


<expr>                      := <assign>
<assign>                    := <equality> ("=" assign)?
<equality>                  := <relational> ("==" <relational> | "!=" <relational>)*
<relational>                := <add> ("<" <add> | "<=" <add> | ">" <add> | ">=" <add>)*
<add>                       := <mul> ("+" <mul> | "-" <mul>)*
<mul>                       := <unary> ("*" <unary> | "/" <unary> | "%" <unary>)*
<unary>                     := "+"? 
                                | "-"? <primary>
                                | "*" <unary>
                                | "&" <unary>
<primary>                   := <num> 
                                | <ident> "(" (<expr> ("," <expr>)*)? ")"
                                | <ident> 
                                | "(" <expr> ")"  