<program>                   := <program-item>*
<program-item>              := <declaration>
                                | <func-def>
<func-def>                  := <declaration> <blockstmt>

<declaration>               := <declaration-specifiers> <init-declarator>*
<declaration-specifiers>    := <type-specifiers>
<type-specifiers>           := "int"

<init-declarator>           := <declarator> ("=" <initializer>)?
<declarator>                := "*"* <direct-declarator>
<direct-declarator>         := <ident>
                                | <direct-declarator> "[" <assign> "]"                                  # array
                                | <direct-declarator> "(" (<declaration> ("," <declaration>) )? ")"     # function
<initializer>               := <assign>
                                | { <assign> ("," <assign>)* }
                                | { <assign> ("," <assign>)* "," }

<type-name>                 := <specifier-qualifier-list> <abstract-declarator>?
<specifier-qualifier-list>  := <type-specifiers>
<abstract-declarator>       := "*"* <direct-abstract-declarator>?
<direct-abstract-declarator>:= <direct-abstract-declarator>? []


<stmt>                      := <expr> ";"
                                | <blockstmt>
                                | "return" <expr> ";"
                                | "if" "(" <expr> ")" <stmt> ("else" stmt)?
                                | "for" "(" <expr>? ";" <expr>? ";" <expr>? ")" <stmt>
                                | <declaration> ";"
<blockstmt>                 := "{" <stmt>* "}"


<expr>                      := <assign>
<assign>                    := <equality> ("=" assign)?
<equality>                  := <relational> ("==" <relational> | "!=" <relational>)*
<relational>                := <add> ("<" <add> | "<=" <add> | ">" <add> | ">=" <add>)*
<add>                       := <mul> ("+" <mul> | "-" <mul>)*
<mul>                       := <unary> ("*" <unary> | "/" <unary> | "%" <unary>)*
<unary>                     := <primary>
                                | "+" <primary>
                                | "-" <primary>
                                | "*" <unary>
                                | "&" <unary>
                                | "sizeof" <unary>
                                | "sizeof" <type-name>
<primary>                   := <num> 
                                | <ident> "(" (<expr> ("," <expr>)*)? ")"
                                | <ident> 
                                | "(" <expr> ")"  
