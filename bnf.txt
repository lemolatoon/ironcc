<program>                   := <program-item>*
<program-item>              := <declaration>
                                | <func-def>
<func-def>                  := <declaration-specifiers> <declarator> <blockstmt>

<declaration>               := <declaration-specifiers> <init-declarator>* ";"
<declaration-specifiers>    := <type-specifiers>
<type-specifiers>           := "int"
                                | "char"
                                | <struct-or-union-specifier>

<struct-or-union-specifier> := struct <ident>? "{" <struct-declaration-list> "}"
                                | struct <ident>
<struct-declaration-list>   := <struct-declaration-list> <type-specifier> <declarator>

<init-declarator>           := <declarator> ("=" <initializer>)?
<declarator>                := "*"* <direct-declarator>
<direct-declarator>         := <ident>
                                | "(" <declarator> ")"
                                | <direct-declarator> "[" <assign>? "]"                                  # array
                                | <direct-declarator> "(" (<declaration> ("," <declaration>) )? ")"     # function
<initializer>               := <assign>
                                | { <assign> ("," <assign>)* }
                                | { <assign> ("," <assign>)* "," }

<type-name>                 := <specifier-qualifier-list> <abstract-declarator>?
<specifier-qualifier-list>  := <type-specifiers>
<abstract-declarator>       := "*"* <direct-abstract-declarator>?
<direct-abstract-declarator>:= <direct-abstract-declarator>? [ <assign> ]
                                | <direct-abstract-declarator>? ( <parameter-type-list>? )
<parameter-type-list>       := <parameter-list>
<parameter-list>            := <parameter-declaration>
<parameter-declaration>     := <declaration-specifiers> <declarator>
                                | <declaration-specifiers> <abstract-declarator>


<stmt>                      := <expr> ";"
                                | <blockstmt>
                                | "return" <expr> ";"
                                | "if" "(" <expr> ")" <stmt> ("else" stmt)?
                                | "for" "(" <expr>? ";" <expr>? ";" <expr>? ")" <stmt>
                                | "for" "(" <declaration> ";" <expr>? ";" <expr>? ")" <stmt>
                                | <declaration> 
<blockstmt>                 := "{" <stmt>* "}"


<expr>                      := <assign>
<assign>                    := <conditional> ("=" <assign>)?
<conditional>               := <logical-or> 
                                | <logical-or> "?" <expr> : <conditional>
<logical-or>                := <logical-or>
                                | <logical-or> || <logical-and>
<logical-and>               := <bit-wise-and>
                                | <logical-and> && <bit-wise-and>
<bit-wise-and>              := <equality> ("&" <equality>)*
<equality>                  := <relational> ("==" <relational> | "!=" <relational>)*
<relational>                := <shift> ("<" <shift> | "<=" <shift> | ">" <shift> | ">=" <shift>)*
<shift>                     := <add> ("<<" <add> | ">>" <add>)*
<add>                       := <mul> ("+" <mul> | "-" <mul>)*
<mul>                       := <unary> ("*" <unary> | "/" <unary> | "%" <unary>)*
<unary>                     := <postfix>
                                | "+" <mul>
                                | "-" <mul>
                                | "~" <mul>
                                | "!" <mul>
                                | "*" <mul>
                                | "&" <mul>
                                | "sizeof" <unary>
                                | "sizeof" "(" <type-name> ")"
<postfix>                   := <primary>
                                | <postfix> "[" <expr> "]"
                                | <postfix> "." <ident>
                                | <postfix> "->" <ident>
<primary>                   := <num> 
                                | """ <letters> """
                                | <ident> "(" (<expr> ("," <expr>)*)? ")"
                                | <ident> 
                                | "(" <expr> ")"  
