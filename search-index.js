var searchIndex = JSON.parse('{\
"ironcc":{"doc":"","t":[0,0,0,0,13,13,3,13,13,4,13,13,4,3,3,4,3,3,4,3,4,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,4,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,4,3,13,13,3,13,13,4,13,13,3,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,3,4,13,13,3,4,13,4,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,4,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,3,4,3,3,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["analyze","generate","parse","tokenize","Add","Addr","Analyzer","Assign","Base","BaseType","Binary","Block","ConvBinOpKind","ConvBinary","ConvExpr","ConvExprKind","ConvFuncDef","ConvProgram","ConvProgramKind","ConvStmt","ConvStmtKind","Deref","Div","Eq","Expr","For","Func","Func","If","Int","Le","Lt","Lvar","Lvar","Mul","Ne","Num","Ptr","Rem","Return","Sub","Type","While","args","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","down_expr","down_func_declare","down_program","down_stmt","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error_at","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","kind","kind","kind","lhs","lvars","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new_addr","new_assign","new_binary","new_block","new_deref","new_expr","new_for","new_func","new_if","new_lvar","new_num","new_ret","new_while","offset","partial_cmp","partial_cmp","partial_cmp","pos","push","rhs","size_of","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_vec","0","0","0","0","0","0","0","1","1","0","0","0","0","0","0","0","1","1","1","1","2","2","3","0","0","Generater","R10","R11","R12","R13","R14","R15","R8","R9","Rax","Rbp","Rcx","Rdi","Rdx","RegKind","Rsi","Rsp","assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","deref","dword","eq","error_at","fmt","fmt","from","from","gen_binary","gen_expr","gen_head","gen_lvalue","gen_stmt","into","into","label","new","partial_cmp","pop","push","qword","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","Add","Addr","Assign","BinOpKind","Binary","Binary","Block","Declaration","Declare","Deref","DirectDeclarator","Div","Eq","Expr","Expr","ExprKind","For","Func","Func","Func","Ge","Gt","Ident","If","Int","LVar","Le","Lt","Minus","Mul","Ne","Num","Parser","Plus","Program","ProgramKind","Rem","Return","Stmt","StmtKind","Sub","TypeSpec","UnOp","Unary","While","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","declrtr","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error_at","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","ident_name","ident_name","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","kind","kind","kind","lhs","n_star","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new_addr","new_assign","new_binary","new_block","new_declare","new_deref","new_for","new_func","new_if","new_lvar","new_num","new_unary","new_while","parse_add","parse_assign","parse_declaration","parse_equality","parse_expr","parse_func","parse_mul","parse_primary","parse_program","parse_relational","parse_stmt","parse_unary","pos","pos","push","ret","rhs","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty_spec","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_vec","0","0","1","0","0","0","0","0","0","0","0","1","1","1","0","1","0","0","0","0","0","0","0","1","1","1","2","2","3","And","BinOp","BinOpToken","Brace","Bracket","CloseDelim","Comma","DelimToken","Else","Eof","Eq","EqEq","For","Ge","Gt","Ident","If","Int","Le","Lt","Minus","Ne","Num","OpenDelim","Paran","Percent","Plus","Position","Return","Semi","Slash","Star","Token","TokenKind","TokenStream","Tokenizer","Type","TypeToken","While","at_eof","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","consume","consume_ident","default","eq","eq","eq","eq","eq","eq","error_at","error_at","expect","expect_number","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_iter","is_type","kind","kind","kind_eq","n_char","n_line","ne","ne","ne","new","new","new","new","next","next_char","next_line","next_token","peek","peek_kind","pos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","tokenize","tokenize_and_kinds","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0"],"q":["ironcc","","","","ironcc::analyzeironcc::analyze::ConvExprKind","","","","","","","","","ironcc::analyze::ConvProgramKind","ironcc::analyze::ConvStmtKind","","","","","","","","","","","","","ironcc::analyze::Type","","ironcc::generate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ironcc::parseironcc::parse::DirectDeclarator","","","ironcc::parse::ExprKind","","","","","","","","","","","ironcc::parse::ProgramKind","","ironcc::parse::StmtKind","","","","","","","","","","","","","ironcc::tokenize","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ironcc::tokenize::TokenKind","","","","",""],"d":["","","","","The <code>+</code> operator (addition)","","","","","","","","","","","","","","","","","","The <code>/</code> operator (division)","The <code>==</code> operator (equality)","","","","","","","The <code>&lt;=</code> operator (less than or equal to)","The <code>&lt;</code> operator (less than)","","","The <code>*</code> operator (multiplication)","The <code>!=</code> operator (Not equal to)","","","The <code>%</code> operator (remains)","","The <code>-</code> operator (subtraction)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Panics","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Used like <code>mov rax, [rbp - offset]</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","*lhs = rhs","","","","","","","","","","lhs = *rhs","","","Panics","","","Returns the argument unchanged.","Returns the argument unchanged.","","Errors","Errors","Errors","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","The <code>+</code> operator (addition)","","","","","","","Declaration","","","","The <code>/</code> operator (division)","The <code>==</code> operator (equality)","","","","","","","","The <code>&gt;=</code> operator (greater than or equal to)","The <code>&gt;</code> operator (greater than)","","","","","The <code>&lt;=</code> operator (less than or equal to)","The <code>&lt;</code> operator (less than)","before analysis only","The <code>*</code> operator (multiplication)","The <code>!=</code> operator (Not equal to)","","","","","","The <code>%</code> operator (remains)","","","","The <code>-</code> operator (subtraction)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Panics","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","<code>&amp;</code>","","","A curly brase (i.e., <code>{</code> or <code>}</code>)","A square bracket (i.e., <code>[</code> or <code>]</code>)","An closing delimiter (e.g., <code>}</code>)","<code>,</code>","","<code>else</code>, reserved word","","<code>=</code> assign","<code>==</code> Equal equal","<code>for</code>, reserved word","<code>&gt;=</code> Greater equal","<code>&gt;</code> Greater than","An ident","<code>if</code>, reserved word","<code>int</code>, type specifier","<code>&lt;=</code> Less equal","<code>&lt;</code> Less than","<code>-</code>","<code>!=</code> Not equal","","An opening delimiter (e.g., <code>{</code>)","A round parenthesis (i.e., <code>(</code> or <code>)</code>)","<code>%</code>","<code>+</code>","","<code>return</code>, reserved word","Semicoron <code>;</code>","<code>/</code>","<code>*</code>","","","","","type specifiers","","<code>while</code>, reserved word","Panics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","if next token is passed kind consume it and return true, …","Panics","","","","","","","","Panics","Panics","if next token is expected kind, do nothing, otherwise <code>panic</code>","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,1,2,0,2,3,0,2,4,0,0,0,0,0,0,0,0,0,2,1,1,4,4,5,2,4,6,1,1,0,2,1,1,2,3,1,4,1,0,4,7,7,8,9,5,7,10,4,11,2,12,3,6,13,1,8,9,5,7,10,4,11,2,12,3,6,13,1,8,9,5,7,10,4,11,2,12,3,6,13,1,8,9,5,7,10,4,11,2,12,3,6,13,1,12,3,6,8,8,8,8,8,9,5,7,10,4,11,2,12,3,6,13,1,8,8,9,5,7,10,4,11,2,12,3,6,13,1,8,9,5,7,10,4,11,2,12,3,6,13,1,8,9,5,7,10,4,11,2,12,3,6,13,1,9,10,11,13,13,7,7,8,9,5,7,10,4,11,2,12,3,13,8,9,7,12,13,1,11,11,11,10,11,10,10,11,10,11,11,10,10,12,12,3,6,11,9,13,3,8,9,5,7,10,4,11,2,12,3,6,13,1,8,9,5,7,10,4,11,2,12,3,6,13,1,8,9,5,7,10,4,11,2,12,3,6,13,1,11,12,8,9,5,7,10,4,11,2,12,3,6,13,1,9,14,15,16,17,18,19,20,17,18,21,22,23,24,25,26,27,23,25,26,27,25,27,27,28,29,0,30,30,30,30,30,30,30,30,30,30,30,30,30,0,30,30,31,31,30,31,30,31,30,31,30,30,31,30,30,31,31,30,31,30,31,31,31,31,31,31,30,31,31,30,31,31,30,31,30,30,31,30,30,31,30,31,30,32,33,33,0,0,33,34,0,34,33,0,32,32,0,34,0,34,35,36,33,32,32,36,34,37,33,32,32,38,32,32,33,0,38,0,0,32,34,0,0,32,0,0,33,34,39,40,35,41,42,36,37,34,43,33,38,44,32,39,40,35,41,42,36,37,34,43,33,38,44,32,40,35,41,42,36,37,34,43,33,38,44,32,40,35,41,42,36,37,34,43,33,38,44,32,42,40,35,41,42,36,37,34,43,33,38,44,32,39,41,40,35,41,42,36,37,34,43,33,38,44,32,39,40,35,41,42,36,37,34,43,33,38,44,32,42,36,39,40,35,41,42,36,37,34,43,33,38,44,32,40,41,43,44,44,42,40,35,41,42,36,34,43,33,44,39,40,42,44,43,43,43,41,41,43,41,43,41,43,43,43,41,39,39,39,39,39,39,39,39,39,39,39,39,42,43,40,41,44,40,35,41,42,36,37,34,43,33,38,44,32,39,40,35,41,42,36,37,34,43,33,38,44,32,39,40,35,41,42,36,37,34,43,33,38,44,32,42,42,39,40,35,41,42,36,37,34,43,33,38,44,32,40,45,46,46,47,48,49,50,51,52,53,54,49,50,52,55,55,56,57,58,59,60,61,62,59,60,61,59,61,61,63,64,0,65,65,64,64,0,64,64,64,64,64,64,64,64,64,66,64,64,63,64,64,64,65,63,63,0,64,64,63,63,0,0,0,0,64,0,64,67,68,64,66,65,63,69,70,67,68,64,66,65,63,69,70,67,64,66,65,63,69,70,67,64,66,65,63,69,70,67,67,67,70,64,66,65,63,69,70,68,67,67,67,64,66,65,63,69,70,67,68,64,66,65,63,69,70,67,68,64,66,65,63,69,70,67,67,67,69,69,69,70,70,64,69,70,68,69,70,67,67,70,70,70,67,67,69,64,66,65,63,69,70,67,68,0,68,64,66,65,63,69,70,67,68,64,66,65,63,69,70,67,68,64,66,65,63,69,70,67,71,72,73,74,75,76],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["analyzer",3]],[[["",0]],["convprogram",3]],[[["",0]],["convprogramkind",4]],[[["",0]],["convfuncdef",3]],[[["",0]],["convstmt",3]],[[["",0]],["convstmtkind",4]],[[["",0]],["convexpr",3]],[[["",0]],["convexprkind",4]],[[["",0]],["lvar",3]],[[["",0]],["type",4]],[[["",0]],["basetype",4]],[[["",0]],["convbinary",3]],[[["",0]],["convbinopkind",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["lvar",3]],["ordering",4]],[[["",0],["type",4]],["ordering",4]],[[["",0],["basetype",4]],["ordering",4]],[[["",0],["expr",3],["btreemap",3]],["convexpr",3]],[[["",0],["declaration",3],["stmt",3],["btreemap",3]],["convprogramkind",4]],[[["",0],["program",3]],["convprogram",3]],[[["",0],["stmt",3],["btreemap",3],["string",3]],["convstmt",3]],[[["",0],["analyzer",3]],["bool",0]],[[["",0],["convprogram",3]],["bool",0]],[[["",0],["convprogramkind",4]],["bool",0]],[[["",0],["convfuncdef",3]],["bool",0]],[[["",0],["convstmt",3]],["bool",0]],[[["",0],["convstmtkind",4]],["bool",0]],[[["",0],["convexpr",3]],["bool",0]],[[["",0],["convexprkind",4]],["bool",0]],[[["",0],["lvar",3]],["bool",0]],[[["",0],["type",4]],["bool",0]],[[["",0],["basetype",4]],["bool",0]],[[["",0],["convbinary",3]],["bool",0]],[[["",0],["convbinopkind",4]],["bool",0]],[[["",0],["str",0]],["never",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[["",0],["analyzer",3]],["bool",0]],[[["",0],["convprogram",3]],["bool",0]],[[["",0],["convprogramkind",4]],["bool",0]],[[["",0],["convfuncdef",3]],["bool",0]],[[["",0],["convstmt",3]],["bool",0]],[[["",0],["convstmtkind",4]],["bool",0]],[[["",0],["convexpr",3]],["bool",0]],[[["",0],["convexprkind",4]],["bool",0]],[[["",0],["lvar",3]],["bool",0]],[[["",0],["type",4]],["bool",0]],[[["",0],["convbinary",3]],["bool",0]],[[["str",0]]],[[]],[[["string",3],["vec",3,[["lvar",3]]],["convstmt",3],["btreeset",3,[["lvar",3]]]]],[[["string",3],["usize",0],["type",4],["btreemap",3]],["result",4]],[[["convbinopkind",4],["box",3,[["convexpr",3]]],["box",3,[["convexpr",3]]]]],[[["binopkind",4]],["option",4]],[[["convexpr",3],["position",3]]],[[["convexpr",3],["convexpr",3],["position",3]]],[[["convbinopkind",4],["convexpr",3],["convexpr",3],["position",3]]],[[["vec",3,[["convstmt",3]]]]],[[["convexpr",3],["position",3]]],[[["convexpr",3]]],[[["option",4,[["convexpr",3]]],["option",4,[["convexpr",3]]],["option",4,[["convexpr",3]]],["convstmt",3]]],[[["string",3],["vec",3,[["convexpr",3]]],["position",3]]],[[["convexpr",3],["convstmt",3],["option",4,[["convstmt",3]]]]],[[["string",3],["position",3],["btreemap",3]],["result",4]],[[["isize",0],["position",3]]],[[["convexpr",3],["string",3]]],[[["convexpr",3],["convstmt",3]]],null,[[["",0],["lvar",3]],["option",4,[["ordering",4]]]],[[["",0],["type",4]],["option",4,[["ordering",4]]]],[[["",0],["basetype",4]],["option",4,[["ordering",4]]]],null,[[["",0],["convprogramkind",4]]],null,[[["",0]],["usize",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["vec",3,[["convprogramkind",4]]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["bufwriter",3],["regkind",4],["regkind",4],["type",4]],["result",4,[["error",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["generater",3]],[[["",0]],["regkind",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["regkind",4]],["ordering",4]],[[["",0],["bufwriter",3],["regkind",4],["regkind",4],["type",4]],["result",4,[["error",3]]]],[[["",0]],["str",0]],[[["",0],["regkind",4]],["bool",0]],[[["",0],["str",0]],["never",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["bufwriter",3],["convbinary",3]],["result",4,[["error",3]]]],[[["",0],["bufwriter",3],["convexpr",3]],["result",4,[["error",3]]]],[[["",0],["bufwriter",3],["convprogram",3]],["result",4,[["error",3]]]],[[["",0],["bufwriter",3],["convexpr",3]],["result",4,[["error",3]]]],[[["",0],["bufwriter",3],["convstmt",3]],["result",4,[["error",3]]]],[[]],[[]],[[["",0]],["usize",0]],[[["str",0]]],[[["",0],["regkind",4]],["option",4,[["ordering",4]]]],[[["",0],["bufwriter",3],["arguments",3]],["result",4,[["error",3]]]],[[["",0],["bufwriter",3],["arguments",3]],["result",4,[["error",3]]]],[[["",0]],["str",0]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["program",3]],[[["",0]],["programkind",4]],[[["",0]],["stmt",3]],[[["",0]],["declaration",3]],[[["",0]],["directdeclarator",4]],[[["",0]],["typespec",4]],[[["",0]],["stmtkind",4]],[[["",0]],["expr",3]],[[["",0]],["exprkind",4]],[[["",0]],["unop",4]],[[["",0]],["binary",3]],[[["",0]],["binopkind",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["",0],["program",3]],["bool",0]],[[["",0],["programkind",4]],["bool",0]],[[["",0],["stmt",3]],["bool",0]],[[["",0],["declaration",3]],["bool",0]],[[["",0],["directdeclarator",4]],["bool",0]],[[["",0],["typespec",4]],["bool",0]],[[["",0],["stmtkind",4]],["bool",0]],[[["",0],["expr",3]],["bool",0]],[[["",0],["exprkind",4]],["bool",0]],[[["",0],["unop",4]],["bool",0]],[[["",0],["binary",3]],["bool",0]],[[["",0],["binopkind",4]],["bool",0]],[[["",0],["str",0]],["never",0]],[[["expr",3]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["str",0]],[[["",0]],["str",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[["",0],["program",3]],["bool",0]],[[["",0],["programkind",4]],["bool",0]],[[["",0],["stmt",3]],["bool",0]],[[["",0],["declaration",3]],["bool",0]],[[["",0],["directdeclarator",4]],["bool",0]],[[["",0],["stmtkind",4]],["bool",0]],[[["",0],["expr",3]],["bool",0]],[[["",0],["exprkind",4]],["bool",0]],[[["",0],["binary",3]],["bool",0]],[[["str",0]]],[[]],[[["typespec",4],["usize",0],["directdeclarator",4],["position",3]]],[[["binopkind",4],["box",3,[["expr",3]]],["box",3,[["expr",3]]]]],[[["expr",3],["position",3]]],[[["expr",3],["expr",3],["position",3]]],[[["binopkind",4],["expr",3],["expr",3],["position",3]]],[[["vec",3,[["stmt",3]]]]],[[["declaration",3]]],[[["expr",3],["position",3]]],[[["option",4,[["expr",3]]],["option",4,[["expr",3]]],["option",4,[["expr",3]]],["stmt",3]]],[[["string",3],["vec",3,[["expr",3]]],["position",3]]],[[["expr",3],["stmt",3],["option",4,[["stmt",3]]]]],[[["string",3],["position",3]]],[[["isize",0],["position",3]]],[[["unop",4],["expr",3],["position",3]]],[[["expr",3],["stmt",3]]],[[["",0],["tokenstream",3]],["expr",3]],[[["",0],["tokenstream",3]],["expr",3]],[[["",0],["tokenstream",3]],["declaration",3]],[[["",0],["tokenstream",3]],["expr",3]],[[["",0],["tokenstream",3]],["expr",3]],[[["",0],["tokenstream",3]],["programkind",4]],[[["",0],["tokenstream",3]],["expr",3]],[[["",0],["tokenstream",3]],["expr",3]],[[["",0],["tokenstream",3]],["program",3]],[[["",0],["tokenstream",3]],["expr",3]],[[["",0],["tokenstream",3]],["stmt",3]],[[["",0],["tokenstream",3]],["expr",3]],null,null,[[["",0],["programkind",4]]],[[["expr",3]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["type",4]],null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["vec",3,[["programkind",4]]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["bool",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["tokenkind",4]],[[["",0]],["typetoken",4]],[[["",0]],["delimtoken",4]],[[["",0]],["binoptoken",4]],[[["",0]],["token",3]],[[["",0]],["position",3]],[[["",0]],["tokenstream",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["tokenkind",4]],["bool",0]],[[["",0]],["string",3]],[[],["position",3]],[[["",0],["tokenkind",4]],["bool",0]],[[["",0],["typetoken",4]],["bool",0]],[[["",0],["delimtoken",4]],["bool",0]],[[["",0],["binoptoken",4]],["bool",0]],[[["",0],["token",3]],["bool",0]],[[["",0],["position",3]],["bool",0]],[[["",0],["position",3],["str",0]],["never",0]],[[["",0],["str",0]],["never",0]],[[["",0],["tokenkind",4]]],[[["",0]],["isize",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[],["box",3,[["tokenkind",4]]]],null,[[["",0],["token",3]],["bool",0]],null,null,[[["",0],["tokenkind",4]],["bool",0]],[[["",0],["token",3]],["bool",0]],[[["",0],["position",3]],["bool",0]],[[["str",0]]],[[["tokenkind",4],["position",3]]],[[["usize",0],["usize",0]]],[[["str",0]]],[[["",0]],["option",4]],[[["",0]]],[[["",0]]],[[["",0],["usize",0]]],[[["",0]],["option",4]],[[["",0]],["option",4,[["tokenkind",4]]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["vec",3,[["token",3]]]],[[["str",0]],["vec",3,[["box",3,[["tokenkind",4]]]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null],"p":[[4,"ConvBinOpKind"],[4,"ConvExprKind"],[4,"Type"],[4,"ConvStmtKind"],[4,"ConvProgramKind"],[4,"BaseType"],[3,"ConvFuncDef"],[3,"Analyzer"],[3,"ConvProgram"],[3,"ConvStmt"],[3,"ConvExpr"],[3,"Lvar"],[3,"ConvBinary"],[13,"Binary"],[13,"Num"],[13,"Lvar"],[13,"Assign"],[13,"Func"],[13,"Deref"],[13,"Addr"],[13,"Func"],[13,"Expr"],[13,"Return"],[13,"Block"],[13,"If"],[13,"While"],[13,"For"],[13,"Base"],[13,"Ptr"],[4,"RegKind"],[3,"Generater"],[4,"BinOpKind"],[4,"ExprKind"],[4,"StmtKind"],[4,"ProgramKind"],[4,"DirectDeclarator"],[4,"TypeSpec"],[4,"UnOp"],[3,"Parser"],[3,"Program"],[3,"Stmt"],[3,"Declaration"],[3,"Expr"],[3,"Binary"],[13,"Ident"],[13,"Func"],[13,"Binary"],[13,"Num"],[13,"Unary"],[13,"Assign"],[13,"LVar"],[13,"Func"],[13,"Deref"],[13,"Addr"],[13,"Func"],[13,"Expr"],[13,"Return"],[13,"Block"],[13,"If"],[13,"While"],[13,"For"],[13,"Declare"],[4,"BinOpToken"],[4,"TokenKind"],[4,"DelimToken"],[4,"TypeToken"],[3,"TokenStream"],[3,"Tokenizer"],[3,"Token"],[3,"Position"],[13,"BinOp"],[13,"Num"],[13,"OpenDelim"],[13,"CloseDelim"],[13,"Ident"],[13,"Type"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};