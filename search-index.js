var searchIndex = JSON.parse('{\
"ironcc":{"doc":"","t":[0,0,0,0,14,0,0,14,13,13,3,13,13,4,13,13,4,3,3,4,3,3,4,3,4,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,4,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,4,3,4,13,13,13,13,13,4,13,13,13,13,4,13,13,4,13,13,13,13,13,13,4,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,13,13,13,13,13,13,13,13,13,13,13,13,13,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,13,13,13,13,4,3,13,13,3,13,13,4,4,13,13,3,13,13,13,4,13,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,3,13,3,4,13,13,13,4,3,3,4,13,13,3,4,4,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,13,13,4,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,3,4,3,3,13,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12],"n":["analyze","common","error","generate","meta","parse","tokenize","unimplemented_err","Add","Addr","Analyzer","Assign","Base","BaseType","Binary","Block","ConvBinOpKind","ConvBinary","ConvExpr","ConvExprKind","ConvFuncDef","ConvProgram","ConvProgramKind","ConvStmt","ConvStmtKind","Deref","Div","Eq","Expr","For","Func","Func","If","Int","Le","Lt","Lvar","Lvar","Mul","Ne","Num","Ptr","Rem","Return","Sub","Type","While","args","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","down_binary","down_expr","down_func_declare","down_program","down_stmt","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error_at","fetch_lvar","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","kind","kind","kind","lhs","lvars","name","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new_addr","new_assign","new_assign_expr_with_type_check","new_binary","new_block","new_deref","new_expr","new_for","new_func","new_if","new_lvar","new_lvar_raw","new_num","new_raw","new_ret","new_while","offset","partial_cmp","partial_cmp","partial_cmp","pos","push","rhs","size_of","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_vec","0","0","0","0","0","0","0","1","1","0","0","0","0","0","0","0","1","1","1","1","2","2","3","0","0","AnalyzeError","AnalyzeErrorKind","CompileError","CompileErrorKind","DerefError","ExpectFailed","Expr","FuncArgs","GenerateError","GenerateErrorKind","IOError","LeftValueError","Local","ParseError","ParseErrorKind","RedefinedError","TokenizeError","TokenizeErrorKind","TypeError","TypeExpectFailed","UndeclaredError","UnexpectedChar","UnexpectedEof","UnexpectedTypeSize","UnexpectedTypeSizeStatus","Unimplemented","VariableKind","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","kind","ne","ne","ne","ne","new","new_deref_error","new_lvalue_error","new_redefined_variable","new_type_error","new_type_expect_failed","new_type_size_error","src","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","1","1","1","1","2","2","2","2","0","0","0","0","0","0","1","0","0","0","0","expect","got","0","1","0","0","1","Generator","R10","R11","R12","R13","R14","R15","R8","R9","Rax","Rbp","Rcx","Rdi","Rdx","RegKind","Rsi","Rsp","assign","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","deref","dword","eq","fmt","fmt","from","from","gen_binary","gen_expr","gen_head","gen_lvalue","gen_stmt","into","into","label","new","partial_cmp","pop","push","qword","to_owned","to_owned","to_string","try_from","try_from","try_from","try_into","try_into","type_id","type_id","AbstractDeclarator","Add","Addr","Array","Array","Assign","BinOpKind","Binary","Binary","Block","Declaration","Declare","Deref","DirectAbstructDeclarator","DirectDeclarator","Div","Eq","Expr","Expr","Expr","Expr","ExprKind","For","Func","Func","Func","Ge","Gt","Ident","If","Initializer","Int","LVar","Le","Lt","Minus","Mul","Ne","Num","Parser","Plus","Program","ProgramKind","Rem","Return","SizeOf","SizeOfOperandKind","SpecQual","Stmt","StmtKind","Sub","Type","TypeName","TypeSpec","UnOp","Unary","While","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","declrtr","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","expr","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","ident_name","ident_name","initializer","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_iter","kind","kind","kind","lhs","n_star","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","ne","new","new","new","new","new","new","new_addr","new_assign","new_binary","new_block","new_declare","new_deref","new_expr_sizeof","new_for","new_func","new_if","new_lvar","new_num","new_type_sizeof","new_unary","new_while","parse_add","parse_assign","parse_declaration","parse_equality","parse_expr","parse_func","parse_initializer","parse_mul","parse_pointer","parse_primary","parse_program","parse_relational","parse_stmt","parse_type_name","parse_type_specifier","parse_unary","pos","pos","push","ret","rhs","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","ty","ty","ty_spec","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with_vec","0","0","0","1","0","0","0","0","0","0","0","0","0","1","1","1","0","0","0","1","0","0","0","0","0","0","0","0","0","1","1","1","2","2","3","And","BinOp","BinOpToken","Brace","Bracket","CloseDelim","Comma","DelimToken","Else","Eof","Eq","EqEq","For","Ge","Gt","Ident","If","Int","Le","Lt","Minus","Ne","Num","OpenDelim","Paran","Percent","Plus","Position","Return","Semi","SizeOf","Slash","Star","Token","TokenKind","TokenStream","Tokenizer","Type","TypeToken","While","advance_and_get_token","advance_char","advance_line","at_eof","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","consume","consume_ident","default","eq","eq","eq","eq","eq","eq","expect","expect_number","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","into","into","into","into","into","into","into","into","into_iter","is_type","kind","kind","kind_eq","n_char","n_line","ne","ne","ne","new","new","new","new","new_expected_failed","new_unexpected_char","new_unexpected_eof","next","peek","peek_expect","peek_kind","pos","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","tokenize","tokenize_and_kinds","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","0","0","0","0","0","0"],"q":["ironcc","","","","","","","","ironcc::analyzeironcc::analyze::ConvExprKind","","","","","","","","","ironcc::analyze::ConvProgramKind","ironcc::analyze::ConvStmtKind","","","","","","","","","","","","","ironcc::analyze::Type","","ironcc::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ironcc::error::AnalyzeErrorKind","","","","","","","","","","","","ironcc::error::CompileErrorKind","","","","","","","ironcc::error::GenerateErrorKind","","","ironcc::error::ParseErrorKind","","","ironcc::error::TokenizeErrorKind","","ironcc::error::UnexpectedTypeSizeStatus","","","ironcc::generate","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ironcc::parseironcc::parse::DirectAbstructDeclarator","ironcc::parse::DirectDeclarator","","","ironcc::parse::ExprKind","","","","","","","","","","","","ironcc::parse::Initializer","","ironcc::parse::ProgramKind","","ironcc::parse::SizeOfOperandKind","","ironcc::parse::StmtKind","","","","","","","","","","","","","ironcc::tokenize","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ironcc::tokenize::TokenKind","","","","",""],"d":["","","","","","","","return <code>CompilerError</code> whose kind is <code>Unimplemented</code>","The <code>+</code> operator (addition)","","","","","","","","","","","","","","","","","","The <code>/</code> operator (division)","The <code>==</code> operator (equality)","","","","","","","The <code>&lt;=</code> operator (less than or equal to)","The <code>&lt;</code> operator (less than)","","","The <code>*</code> operator (multiplication)","The <code>!=</code> operator (Not equal to)","","","The <code>%</code> operator (remains)","","The <code>-</code> operator (subtraction)","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Panics","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","create first defined variable","","","","","","Used like <code>mov rax, [rbp - offset]</code>","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","An error returned when an operation could not be completed …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","*lhs = rhs","","","","","","","","","","lhs = *rhs","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","Errors","Errors","Errors","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","&lt;abstract-declarator&gt; := “*”* …","The <code>+</code> operator (addition)","","","? “[]”","","","","","","Declaration","","","","","The <code>/</code> operator (division)","The <code>==</code> operator (equality)","","","","","","","","","","The <code>&gt;=</code> operator (greater than or equal to)","The <code>&gt;</code> operator (greater than)","","","","","","The <code>&lt;=</code> operator (less than or equal to)","The <code>&lt;</code> operator (less than)","before analysis only","The <code>*</code> operator (multiplication)","The <code>!=</code> operator (Not equal to)","","","","","","The <code>%</code> operator (remains)","","","","&lt;specifier-sualifier-list&gt; := &lt;type-specifiers&gt;","","","The <code>-</code> operator (subtraction)","","&lt;type-name&gt; := &lt;specifier-qualifier-list&gt; …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codecode>&amp;</code>","","","A curly brase (i.e., <code>{</code> or <code>}</code>)","A square bracket (i.e., <code>[</code> or <code>]</code>)","An closing delimiter (e.g., <code>}</code>)","<code>,</code>","","<code>else</code>, reserved word","","<code>=</code> assign","<code>==</code> Equal equal","<code>for</code>, reserved word","<code>&gt;=</code> Greater equal","<code>&gt;</code> Greater than","An ident","<code>if</code>, reserved word","<code>int</code>, type specifier","<code>&lt;=</code> Less equal","<code>&lt;</code> Less than","<code>-</code>","<code>!=</code> Not equal","","An opening delimiter (e.g., <code>{</code>)","A round parenthesis (i.e., <code>(</code> or <code>)</code>)","<code>%</code>","<code>+</code>","","<code>return</code>, reserved word","Semicoron <code>;</code>","<code>SizeOf</code>, reserved word","<code>/</code>","<code>*</code>","","","","","type specifiers","","<code>while</code>, reserved word","","increment <code>self.n_char</code>","","Panics","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","if next token is passed kind consume it and return true, …","","","","","","","","","if next token is expected kind, do nothing, otherwise <code>panic</code>","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Return next token is <code>TokenKind::Type</code> or not.(Not consume)","","","","","","","","","","","","","","","","","","if next token is passed kind, then return true, otherwise …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,0,0,0,0,0,0,1,2,0,2,3,0,2,4,0,0,0,0,0,0,0,0,0,2,1,1,4,4,5,2,4,6,1,1,0,2,1,1,2,3,1,4,1,0,4,7,7,8,9,5,7,10,4,11,2,12,3,6,13,1,8,9,5,7,10,4,11,2,12,3,6,13,1,8,9,5,7,10,4,11,2,12,3,6,13,1,8,9,5,7,10,4,11,2,12,3,6,13,1,12,3,6,8,8,8,8,8,8,9,5,7,10,4,11,2,12,3,6,13,1,8,8,8,9,5,7,10,4,11,2,12,3,6,13,1,8,9,5,7,10,4,11,2,12,3,6,13,1,8,9,5,7,10,4,11,2,12,3,6,13,1,9,10,11,13,13,7,7,8,9,5,7,10,4,11,2,12,3,13,8,9,7,13,1,11,11,8,11,10,11,10,10,11,10,8,11,11,12,10,10,12,12,3,6,11,9,13,3,8,9,5,7,10,4,11,2,12,3,6,13,1,8,9,5,7,10,4,11,2,12,3,6,13,1,8,9,5,7,10,4,11,2,12,3,6,13,1,7,11,12,8,9,5,7,10,4,11,2,12,3,6,13,1,9,14,15,16,17,18,19,20,17,18,21,22,23,24,25,26,27,23,25,26,27,25,27,27,28,29,30,0,0,0,31,32,33,33,30,0,30,31,34,30,0,35,30,0,35,35,35,36,32,31,0,30,0,37,30,36,32,35,34,31,33,37,30,36,32,35,34,31,33,37,30,36,32,35,34,31,33,37,30,36,32,35,34,31,33,36,35,34,31,33,37,37,30,36,32,35,34,31,33,37,37,30,36,32,35,34,31,33,37,30,36,32,35,34,31,33,37,36,35,31,33,37,37,37,37,37,37,37,37,37,30,36,32,35,34,31,33,37,37,30,36,32,35,34,31,33,37,30,36,32,35,34,31,33,37,30,36,32,35,34,31,33,38,39,40,41,38,39,40,41,38,39,40,41,42,43,44,45,46,47,46,48,49,50,51,52,52,53,53,54,55,55,0,56,56,56,56,56,56,56,56,56,56,56,56,56,0,56,56,57,57,56,57,56,57,56,57,56,56,57,56,56,57,56,57,56,57,57,57,57,57,57,56,57,57,56,57,57,56,57,56,56,57,56,56,57,56,57,56,0,58,59,60,61,59,0,0,59,62,0,62,59,0,0,58,58,0,60,62,63,0,62,64,65,59,58,58,65,62,0,66,59,58,58,67,58,58,59,0,67,0,0,58,62,59,0,0,0,0,58,63,0,0,0,59,62,68,69,64,70,71,65,60,66,72,73,74,61,62,75,59,63,67,76,58,68,69,64,70,71,65,60,66,72,73,74,61,62,75,59,63,67,76,58,69,64,70,71,65,60,66,72,73,74,61,62,75,59,63,67,76,58,69,64,70,71,65,60,66,72,73,74,61,62,75,59,63,67,76,58,71,69,64,70,71,65,60,66,72,73,74,61,62,75,59,63,67,76,58,70,69,64,70,71,65,60,66,72,73,74,61,62,75,59,63,67,76,58,68,69,64,70,71,65,60,66,72,73,74,61,62,75,59,63,67,76,58,71,65,71,68,69,64,70,71,65,60,66,72,73,74,61,62,75,59,63,67,76,58,69,70,75,76,76,71,69,64,70,71,65,60,72,73,74,61,62,75,59,63,76,68,69,71,72,74,76,75,75,75,70,70,75,75,70,75,70,75,75,75,75,70,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,71,75,69,70,76,69,64,70,71,65,60,66,72,73,74,61,62,75,59,63,67,76,58,68,69,64,70,71,65,60,66,72,73,74,61,62,75,59,63,67,76,58,68,69,64,70,71,65,60,66,72,73,74,61,62,75,59,63,67,76,58,71,72,71,68,69,64,70,71,65,60,66,72,73,74,61,62,75,59,63,67,76,58,69,77,78,79,79,80,81,82,83,84,85,86,87,88,82,83,85,89,90,91,91,92,93,94,95,96,97,98,99,100,97,98,99,97,99,99,101,102,0,103,103,102,102,0,102,102,102,102,102,102,102,102,102,104,102,102,101,102,102,102,103,101,101,0,102,102,102,101,101,0,0,0,0,102,0,102,105,105,105,106,107,102,104,103,101,108,105,106,107,102,104,103,101,108,105,106,102,104,103,101,108,105,106,102,104,103,101,108,105,106,106,106,105,102,104,103,101,108,105,106,106,102,104,103,101,108,105,106,107,102,104,103,101,108,105,106,107,102,104,103,101,108,105,106,106,106,108,108,108,105,105,102,108,105,107,108,105,106,106,107,106,106,106,106,106,108,102,104,103,101,108,105,106,107,0,107,102,104,103,101,108,105,106,107,102,104,103,101,108,105,106,107,102,104,103,101,108,105,106,109,110,111,112,113,114],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["analyzer",3]],[[["",0]],["convprogram",3]],[[["",0]],["convprogramkind",4]],[[["",0]],["convfuncdef",3]],[[["",0]],["convstmt",3]],[[["",0]],["convstmtkind",4]],[[["",0]],["convexpr",3]],[[["",0]],["convexprkind",4]],[[["",0]],["lvar",3]],[[["",0]],["type",4]],[[["",0]],["basetype",4]],[[["",0]],["convbinary",3]],[[["",0]],["convbinopkind",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["lvar",3]],["ordering",4]],[[["",0],["type",4]],["ordering",4]],[[["",0],["basetype",4]],["ordering",4]],[[["",0],["binary",3],["position",3],["btreemap",3]],["result",4,[["convexpr",3],["compileerror",3]]]],[[["",0],["expr",3],["btreemap",3]],["result",4,[["convexpr",3],["compileerror",3]]]],[[["",0],["declaration",3],["stmt",3],["btreemap",3]],["result",4,[["convprogramkind",4],["compileerror",3]]]],[[["",0],["program",3]],["result",4,[["convprogram",3],["compileerror",3]]]],[[["",0],["stmt",3],["btreemap",3],["string",3]],["result",4,[["convstmt",3],["compileerror",3]]]],[[["",0],["analyzer",3]],["bool",0]],[[["",0],["convprogram",3]],["bool",0]],[[["",0],["convprogramkind",4]],["bool",0]],[[["",0],["convfuncdef",3]],["bool",0]],[[["",0],["convstmt",3]],["bool",0]],[[["",0],["convstmtkind",4]],["bool",0]],[[["",0],["convexpr",3]],["bool",0]],[[["",0],["convexprkind",4]],["bool",0]],[[["",0],["lvar",3]],["bool",0]],[[["",0],["type",4]],["bool",0]],[[["",0],["basetype",4]],["bool",0]],[[["",0],["convbinary",3]],["bool",0]],[[["",0],["convbinopkind",4]],["bool",0]],[[["",0],["str",0]],["never",0]],[[["",0],["str",0],["position",3],["btreemap",3]],["result",4,[["convexpr",3],["compileerror",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[["",0],["analyzer",3]],["bool",0]],[[["",0],["convprogram",3]],["bool",0]],[[["",0],["convprogramkind",4]],["bool",0]],[[["",0],["convfuncdef",3]],["bool",0]],[[["",0],["convstmt",3]],["bool",0]],[[["",0],["convstmtkind",4]],["bool",0]],[[["",0],["convexpr",3]],["bool",0]],[[["",0],["convexprkind",4]],["bool",0]],[[["",0],["lvar",3]],["bool",0]],[[["",0],["type",4]],["bool",0]],[[["",0],["convbinary",3]],["bool",0]],[[["str",0]]],[[]],[[["type",4],["string",3],["vec",3,[["lvar",3]]],["convstmt",3],["btreeset",3,[["lvar",3]]]]],[[["convbinopkind",4],["box",3,[["convexpr",3]]],["box",3,[["convexpr",3]]]]],[[["binopkind",4]],["option",4]],[[["convexpr",3],["position",3]]],[[["convexpr",3],["convexpr",3],["position",3]]],[[["",0],["convexpr",3],["convexpr",3],["position",3]],["result",4,[["convexpr",3],["compileerror",3]]]],[[["convbinopkind",4],["convexpr",3],["convexpr",3],["type",4],["position",3]]],[[["vec",3,[["convstmt",3]]]]],[[["convexpr",3],["type",4],["position",3]]],[[["convexpr",3]]],[[["option",4,[["convexpr",3]]],["option",4,[["convexpr",3]]],["option",4,[["convexpr",3]]],["convstmt",3]]],[[["string",3],["vec",3,[["convexpr",3]]],["position",3]]],[[["convexpr",3],["convstmt",3],["option",4,[["convstmt",3]]]]],[[["str",0],["string",3],["position",3],["usize",0],["type",4],["btreemap",3]],["result",4,[["lvar",3],["compileerror",3]]]],[[["lvar",3],["type",4],["position",3]]],[[["isize",0],["position",3]]],[[["usize",0],["type",4]]],[[["convexpr",3],["string",3]]],[[["convexpr",3],["convstmt",3]]],null,[[["",0],["lvar",3]],["option",4,[["ordering",4]]]],[[["",0],["type",4]],["option",4,[["ordering",4]]]],[[["",0],["basetype",4]],["option",4,[["ordering",4]]]],null,[[["",0],["convprogramkind",4]]],null,[[["",0]],["usize",0]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],null,null,null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["vec",3,[["convprogramkind",4]]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["compileerror",3]],[[["",0]]],[[["",0]],["tokenizeerrorkind",4]],[[["",0]]],[[["",0]],["analyzeerrorkind",4]],[[["",0]],["variablekind",4]],[[["",0]],["generateerrorkind",4]],[[["",0]],["unexpectedtypesizestatus",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["tokenizeerrorkind",4]],["bool",0]],[[["",0],["analyzeerrorkind",4]],["bool",0]],[[["",0],["variablekind",4]],["bool",0]],[[["",0],["generateerrorkind",4]],["bool",0]],[[["",0],["unexpectedtypesizestatus",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[["error",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["",0],["tokenizeerrorkind",4]],["bool",0]],[[["",0],["analyzeerrorkind",4]],["bool",0]],[[["",0],["generateerrorkind",4]],["bool",0]],[[["",0],["unexpectedtypesizestatus",4]],["bool",0]],[[["str",0],["compileerrorkind",4]]],[[["str",0],["convexpr",3]]],[[["str",0],["convexpr",3]]],[[["str",0],["string",3],["position",3],["variablekind",4]]],[[["str",0],["convexpr",3],["convexpr",3],["option",4,[["into",8,[["string",3]]]]]]],[[["str",0],["position",3],["type",4],["type",4]]],[[["str",0],["unexpectedtypesizestatus",4]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["bufwriter",3],["regkind",4],["regkind",4],["type",4],["unexpectedtypesizestatus",4]],["result",4,[["compileerror",3]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["generator",3]],[[["",0]],["regkind",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["regkind",4]],["ordering",4]],[[["",0],["bufwriter",3],["regkind",4],["regkind",4],["type",4],["unexpectedtypesizestatus",4]],["result",4,[["compileerror",3]]]],[[["",0]],["str",0]],[[["",0],["regkind",4]],["bool",0]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[["",0],["bufwriter",3],["convbinary",3]],["result",4,[["compileerror",3]]]],[[["",0],["bufwriter",3],["convexpr",3]],["result",4,[["compileerror",3]]]],[[["",0],["bufwriter",3],["convprogram",3]],["result",4,[["compileerror",3]]]],[[["",0],["bufwriter",3],["convexpr",3]],["result",4,[["compileerror",3]]]],[[["",0],["bufwriter",3],["convstmt",3]],["result",4,[["compileerror",3]]]],[[]],[[]],[[["",0]],["usize",0]],[[["str",0]]],[[["",0],["regkind",4]],["option",4,[["ordering",4]]]],[[["",0],["bufwriter",3],["arguments",3]],["result",4,[["compileerror",3]]]],[[["",0],["bufwriter",3],["arguments",3]],["result",4,[["compileerror",3]]]],[[["",0]],["str",0]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[],["result",4]],[[],["result",4]],[[["str",0]],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,nullprogram",3]],[[["",0]],["programkind",4]],[[["",0]],["stmt",3]],[[["",0]],["declaration",3]],[[["",0]],["directdeclarator",4]],[[["",0]],["initializer",4]],[[["",0]],["typespec",4]],[[["",0]],["typename",3]],[[["",0]],["specqual",3]],[[["",0]],["abstractdeclarator",3]],[[["",0]],["directabstructdeclarator",4]],[[["",0]],["stmtkind",4]],[[["",0]],["expr",3]],[[["",0]],["exprkind",4]],[[["",0]],["sizeofoperandkind",4]],[[["",0]],["unop",4]],[[["",0]],["binary",3]],[[["",0]],["binopkind",4]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[["",0],["program",3]],["bool",0]],[[["",0],["programkind",4]],["bool",0]],[[["",0],["stmt",3]],["bool",0]],[[["",0],["declaration",3]],["bool",0]],[[["",0],["directdeclarator",4]],["bool",0]],[[["",0],["initializer",4]],["bool",0]],[[["",0],["typespec",4]],["bool",0]],[[["",0],["typename",3]],["bool",0]],[[["",0],["specqual",3]],["bool",0]],[[["",0],["abstractdeclarator",3]],["bool",0]],[[["",0],["directabstructdeclarator",4]],["bool",0]],[[["",0],["stmtkind",4]],["bool",0]],[[["",0],["expr",3]],["bool",0]],[[["",0],["exprkind",4]],["bool",0]],[[["",0],["sizeofoperandkind",4]],["bool",0]],[[["",0],["unop",4]],["bool",0]],[[["",0],["binary",3]],["bool",0]],[[["",0],["binopkind",4]],["bool",0]],[[["expr",3]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["str",0]],[[["",0]],["str",0]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,[[["",0],["program",3]],["bool",0]],[[["",0],["programkind",4]],["bool",0]],[[["",0],["stmt",3]],["bool",0]],[[["",0],["declaration",3]],["bool",0]],[[["",0],["directdeclarator",4]],["bool",0]],[[["",0],["initializer",4]],["bool",0]],[[["",0],["typename",3]],["bool",0]],[[["",0],["specqual",3]],["bool",0]],[[["",0],["abstractdeclarator",3]],["bool",0]],[[["",0],["directabstructdeclarator",4]],["bool",0]],[[["",0],["stmtkind",4]],["bool",0]],[[["",0],["expr",3]],["bool",0]],[[["",0],["exprkind",4]],["bool",0]],[[["",0],["sizeofoperandkind",4]],["bool",0]],[[["",0],["binary",3]],["bool",0]],[[["str",0]]],[[]],[[["typespec",4],["usize",0],["directdeclarator",4],["option",4,[["initializer",4]]],["position",3]]],[[["specqual",3],["option",4,[["abstractdeclarator",3]]],["position",3]]],[[["usize",0],["option",4,[["directabstructdeclarator",4]]]]],[[["binopkind",4],["box",3,[["expr",3]]],["box",3,[["expr",3]]]]],[[["expr",3],["position",3]]],[[["expr",3],["expr",3],["position",3]]],[[["binopkind",4],["expr",3],["expr",3],["position",3]]],[[["vec",3,[["stmt",3]]]]],[[["declaration",3]]],[[["expr",3],["position",3]]],[[["expr",3],["position",3]]],[[["option",4,[["expr",3]]],["option",4,[["expr",3]]],["option",4,[["expr",3]]],["stmt",3]]],[[["string",3],["vec",3,[["expr",3]]],["position",3]]],[[["expr",3],["stmt",3],["option",4,[["stmt",3]]]]],[[["string",3],["position",3]]],[[["isize",0],["position",3]]],[[["typename",3],["position",3]]],[[["unop",4],["expr",3],["position",3]]],[[["expr",3],["stmt",3]]],[[["",0],["tokenstream",3]],["result",4,[["expr",3],["compileerror",3]]]],[[["",0],["tokenstream",3]],["result",4,[["expr",3],["compileerror",3]]]],[[["",0],["tokenstream",3]],["result",4,[["declaration",3],["compileerror",3]]]],[[["",0],["tokenstream",3]],["result",4,[["expr",3],["compileerror",3]]]],[[["",0],["tokenstream",3]],["result",4,[["expr",3],["compileerror",3]]]],[[["",0],["tokenstream",3]],["result",4,[["programkind",4],["compileerror",3]]]],[[["",0],["tokenstream",3]],["result",4,[["initializer",4],["compileerror",3]]]],[[["",0],["tokenstream",3]],["result",4,[["expr",3],["compileerror",3]]]],[[["tokenstream",3]],["result",4,[["usize",0],["compileerror",3]]]],[[["",0],["tokenstream",3]],["result",4,[["expr",3],["compileerror",3]]]],[[["",0],["tokenstream",3]],["result",4,[["program",3],["compileerror",3]]]],[[["",0],["tokenstream",3]],["result",4,[["expr",3],["compileerror",3]]]],[[["",0],["tokenstream",3]],["result",4,[["stmt",3],["compileerror",3]]]],[[["tokenstream",3]],["result",4,[["typename",3],["compileerror",3]]]],[[["tokenstream",3]],["result",4,[["compileerror",3]]]],[[["",0],["tokenstream",3]],["result",4,[["expr",3],["compileerror",3]]]],null,null,[[["",0],["programkind",4]]],[[["expr",3]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["type",4]],[[["",0]],["type",4]],null,[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["vec",3,[["programkind",4]]]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["",0],["usize",0]]],[[["",0]]],[[["",0]]],[[["",0]],["bool",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["tokenkind",4]],[[["",0]],["typetoken",4]],[[["",0]],["delimtoken",4]],[[["",0]],["binoptoken",4]],[[["",0]],["token",3]],[[["",0]],["position",3]],[[["",0]],["tokenstream",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["tokenkind",4]],["bool",0]],[[["",0]],["result",4,[["string",3],["compileerror",3]]]],[[],["position",3]],[[["",0],["tokenkind",4]],["bool",0]],[[["",0],["typetoken",4]],["bool",0]],[[["",0],["delimtoken",4]],["bool",0]],[[["",0],["binoptoken",4]],["bool",0]],[[["",0],["token",3]],["bool",0]],[[["",0],["position",3]],["bool",0]],[[["",0],["tokenkind",4]],["result",4,[["compileerror",3]]]],[[["",0]],["result",4,[["isize",0],["compileerror",3]]]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[["",0],["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0]],["bool",0]],[[],["box",3,[["tokenkind",4]]]],null,[[["",0],["token",3]],["bool",0]],null,null,[[["",0],["tokenkind",4]],["bool",0]],[[["",0],["token",3]],["bool",0]],[[["",0],["position",3]],["bool",0]],[[["str",0]]],[[["tokenkind",4],["position",3]]],[[["usize",0],["usize",0]]],[[["str",0]]],[[["",0],["box",3,[["debug",8]]],["token",3]],["compileerror",3]],[[["",0],["position",3],["char",0]],["compileerror",3]],[[["",0],["box",3,[["debug",8]]]],["compileerror",3]],[[["",0]],["option",4]],[[["",0]],["option",4]],[[["",0],["tokenkind",4]],["bool",0]],[[["",0]],["option",4,[["tokenkind",4]]]],null,[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["result",4,[["vec",3,[["token",3]]],["compileerror",3]]]],[[["str",0]],["result",4,[["vec",3,[["box",3,[["tokenkind",4]]]]],["compileerror",3]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],null,null,null,null,null,null],"p":[[4,"ConvBinOpKind"],[4,"ConvExprKind"],[4,"Type"],[4,"ConvStmtKind"],[4,"ConvProgramKind"],[4,"BaseType"],[3,"ConvFuncDef"],[3,"Analyzer"],[3,"ConvProgram"],[3,"ConvStmt"],[3,"ConvExpr"],[3,"Lvar"],[3,"ConvBinary"],[13,"Binary"],[13,"Num"],[13,"Lvar"],[13,"Assign"],[13,"Func"],[13,"Deref"],[13,"Addr"],[13,"Func"],[13,"Expr"],[13,"Return"],[13,"Block"],[13,"If"],[13,"While"],[13,"For"],[13,"Base"],[13,"Ptr"],[4,"CompileErrorKind"],[4,"GenerateErrorKind"],[4,"ParseErrorKind"],[4,"UnexpectedTypeSizeStatus"],[4,"VariableKind"],[4,"AnalyzeErrorKind"],[4,"TokenizeErrorKind"],[3,"CompileError"],[13,"RedefinedError"],[13,"UndeclaredError"],[13,"TypeError"],[13,"TypeExpectFailed"],[13,"TokenizeError"],[13,"ParseError"],[13,"AnalyzeError"],[13,"GenerateError"],[13,"Unimplemented"],[13,"IOError"],[13,"UnexpectedTypeSize"],[13,"LeftValueError"],[13,"DerefError"],[13,"UnexpectedEof"],[13,"ExpectFailed"],[13,"UnexpectedChar"],[13,"Expr"],[13,"FuncArgs"],[4,"RegKind"],[3,"Generator"],[4,"BinOpKind"],[4,"ExprKind"],[4,"Initializer"],[4,"DirectAbstructDeclarator"],[4,"StmtKind"],[4,"SizeOfOperandKind"],[4,"ProgramKind"],[4,"DirectDeclarator"],[4,"TypeSpec"],[4,"UnOp"],[3,"Parser"],[3,"Program"],[3,"Stmt"],[3,"Declaration"],[3,"TypeName"],[3,"SpecQual"],[3,"AbstractDeclarator"],[3,"Expr"],[3,"Binary"],[13,"Array"],[13,"Ident"],[13,"Func"],[13,"Binary"],[13,"Num"],[13,"Unary"],[13,"Assign"],[13,"LVar"],[13,"Func"],[13,"Deref"],[13,"Addr"],[13,"SizeOf"],[13,"Expr"],[13,"Array"],[13,"Func"],[13,"Expr"],[13,"Type"],[13,"Expr"],[13,"Return"],[13,"Block"],[13,"If"],[13,"While"],[13,"For"],[13,"Declare"],[4,"BinOpToken"],[4,"TokenKind"],[4,"DelimToken"],[4,"TypeToken"],[3,"Position"],[3,"TokenStream"],[3,"Tokenizer"],[3,"Token"],[13,"BinOp"],[13,"Num"],[13,"OpenDelim"],[13,"CloseDelim"],[13,"Ident"],[13,"Type"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};