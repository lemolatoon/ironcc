---
source: tests/insta_test.rs
expression: tester.tokens().as_ref().unwrap()
---
[
    Token {
        kind: Type(
            Int,
        ),
        debug_info: DebugInfo {
            pos: Position {
                n_char: 0,
                n_line: 0,
            },
        },
    },
    Token {
        kind: Ident(
            "main",
        ),
        debug_info: DebugInfo {
            pos: Position {
                n_char: 4,
                n_line: 0,
            },
        },
    },
    Token {
        kind: OpenDelim(
            Paren,
        ),
        debug_info: DebugInfo {
            pos: Position {
                n_char: 8,
                n_line: 0,
            },
        },
    },
    Token {
        kind: CloseDelim(
            Paren,
        ),
        debug_info: DebugInfo {
            pos: Position {
                n_char: 9,
                n_line: 0,
            },
        },
    },
    Token {
        kind: OpenDelim(
            Brace,
        ),
        debug_info: DebugInfo {
            pos: Position {
                n_char: 11,
                n_line: 0,
            },
        },
    },
    Token {
        kind: Type(
            Int,
        ),
        debug_info: DebugInfo {
            pos: Position {
                n_char: 12,
                n_line: 0,
            },
        },
    },
    Token {
        kind: Ident(
            "a",
        ),
        debug_info: DebugInfo {
            pos: Position {
                n_char: 16,
                n_line: 0,
            },
        },
    },
    Token {
        kind: Eq,
        debug_info: DebugInfo {
            pos: Position {
                n_char: 18,
                n_line: 0,
            },
        },
    },
    Token {
        kind: Num(
            5,
        ),
        debug_info: DebugInfo {
            pos: Position {
                n_char: 20,
                n_line: 0,
            },
        },
    },
    Token {
        kind: Semi,
        debug_info: DebugInfo {
            pos: Position {
                n_char: 21,
                n_line: 0,
            },
        },
    },
    Token {
        kind: Type(
            Int,
        ),
        debug_info: DebugInfo {
            pos: Position {
                n_char: 23,
                n_line: 0,
            },
        },
    },
    Token {
        kind: BinOp(
            Star,
        ),
        debug_info: DebugInfo {
            pos: Position {
                n_char: 27,
                n_line: 0,
            },
        },
    },
    Token {
        kind: Ident(
            "p",
        ),
        debug_info: DebugInfo {
            pos: Position {
                n_char: 28,
                n_line: 0,
            },
        },
    },
    Token {
        kind: Eq,
        debug_info: DebugInfo {
            pos: Position {
                n_char: 30,
                n_line: 0,
            },
        },
    },
    Token {
        kind: BinOp(
            And,
        ),
        debug_info: DebugInfo {
            pos: Position {
                n_char: 32,
                n_line: 0,
            },
        },
    },
    Token {
        kind: Ident(
            "a",
        ),
        debug_info: DebugInfo {
            pos: Position {
                n_char: 33,
                n_line: 0,
            },
        },
    },
    Token {
        kind: Semi,
        debug_info: DebugInfo {
            pos: Position {
                n_char: 34,
                n_line: 0,
            },
        },
    },
    Token {
        kind: Return,
        debug_info: DebugInfo {
            pos: Position {
                n_char: 36,
                n_line: 0,
            },
        },
    },
    Token {
        kind: Num(
            0,
        ),
        debug_info: DebugInfo {
            pos: Position {
                n_char: 43,
                n_line: 0,
            },
        },
    },
    Token {
        kind: Semi,
        debug_info: DebugInfo {
            pos: Position {
                n_char: 44,
                n_line: 0,
            },
        },
    },
    Token {
        kind: CloseDelim(
            Brace,
        ),
        debug_info: DebugInfo {
            pos: Position {
                n_char: 45,
                n_line: 0,
            },
        },
    },
    Token {
        kind: Eof,
        debug_info: DebugInfo {
            pos: Position {
                n_char: 46,
                n_line: 0,
            },
        },
    },
]
